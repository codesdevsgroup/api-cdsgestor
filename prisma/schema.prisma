generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Config {
  id           Int                 @id @default(autoincrement())
  name         String
  email        String
  mobile       String
  phone1       String?
  phone2       String?
  place        String
  number       String
  neighborhood String
  city         String
  state        String
  zipCode      String
  workingHours ConfigWorkingHour[]

  @@map("config")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  username  String    @unique
  cpf       String?
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  role      Role      @default(CLIENT)
  personId  Int?      @unique
  person    Person?   @relation(fields: [personId], references: [id])
  posts     Post[]

  @@map("user")
}

enum Role {
  CLIENT
  ADMIN
  EMPLOYEE
  FINANCIAL
  SALESPERSON
  TECHNICIAN
  SUPERVISOR
  SUPERADMIN
}

model Person {
  id          Int        @id @default(autoincrement())
  name        String
  fantasyName String?
  type        PersonType
  cpf         String?
  cnpj        String?
  ie          String?
  email       String?
  phone1      String?
  phone2      String?
  birthDate   DateTime?
  notes       String?
  delinquent  Boolean    @default(false)
  photo       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  users       User[]
  addresses   Address[]

  @@map("person")
}

enum PersonType {
  INDIVIDUAL
  COMPANY
  RURAL_PRODUCER
}

model Address {
  id           Int       @id @default(autoincrement())
  place        String
  number       String
  neighborhood String
  city         String
  state        String
  zipCode      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  personId     Int
  person       Person    @relation(fields: [personId], references: [id])

  @@map("address")
}

model ConfigWorkingHour {
  id         Int       @id @default(autoincrement())
  day        Weekday
  open       DateTime
  close      DateTime
  lunchStart DateTime?
  lunchEnd   DateTime?
  configId   Int
  config     Config    @relation(fields: [configId], references: [id])

  @@map("config_working_hours")
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Post {
  id                 Int          @id @default(autoincrement())
  title              String
  content            String
  published          Boolean      @default(false)
  date               DateTime     @default(now())
  price              Float?
  productDescription String?
  productCategory    String?
  linkAffiliate      String?
  authorId           String
  tags               String
  categoryId         Int
  category           CategoryPost @relation(fields: [categoryId], references: [id])
  author             User         @relation(fields: [authorId], references: [id])

  @@map("posts")
}

model CategoryPost {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]

  @@map("categorypost")
}
